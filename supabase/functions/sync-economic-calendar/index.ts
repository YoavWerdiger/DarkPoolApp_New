// Sync Economic Calendar - New Clean Function
// ◊©◊ï◊ú◊£ ◊ê◊ô◊®◊ï◊¢◊ô ◊ô◊ï◊û◊ü ◊õ◊ú◊õ◊ú◊ô ◊û-EODHD

import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const EODHD_API_KEY = '68e3c3af900997.85677801'

// ◊™◊®◊í◊ï◊ù ◊õ◊ï◊™◊®◊ï◊™ ◊ú◊¢◊ë◊®◊ô◊™
function translateTitle(eventType: string): string {
  const type = eventType.toLowerCase();
  
  const translations: { [key: string]: string } = {
    // ◊û◊ì◊ô◊†◊ô◊ï◊™ ◊û◊ï◊†◊ô◊ò◊®◊ô◊™
    'fomc statement': 'üì¢ ◊î◊¶◊î◊®◊™ ◊î◊§◊ì',
    'fomc meeting': 'üè¶ ◊ô◊©◊ô◊ë◊™ ◊î◊§◊ì',
    'fed chair powell speech': 'üé§ ◊†◊ê◊ï◊ù ◊ô◊ï"◊® ◊î◊§◊ì',
    'fed chair speech': 'üé§ ◊†◊ê◊ï◊ù ◊ô◊ï"◊® ◊î◊§◊ì',
    'fed waller speech': 'üé§ ◊†◊ê◊ï◊ù ◊§◊ì - ◊ï◊ï◊ú◊®',
    'fed collins speech': 'üé§ ◊†◊ê◊ï◊ù ◊§◊ì - ◊ß◊ï◊ú◊ô◊†◊°',
    'fed bowman speech': 'üé§ ◊†◊ê◊ï◊ù ◊§◊ì - ◊ë◊ê◊ï◊û◊ü',
    'interest rate decision': 'üí∞ ◊î◊ó◊ú◊ò◊™ ◊®◊ô◊ë◊ô◊™',
    'beige book': 'üìñ ◊°◊§◊® ◊ë◊ñ\' ◊©◊ú ◊î◊§◊ì',
    'fed beige book': 'üìñ ◊°◊§◊® ◊ë◊ñ\' ◊©◊ú ◊î◊§◊ì',
    
    // ◊ê◊ô◊†◊§◊ú◊¶◊ô◊î
    'cpi s.a': 'üìä CPI - ◊û◊ì◊ì ◊û◊ó◊ô◊®◊ô◊ù ◊ú◊¶◊®◊õ◊ü',
    'inflation rate': 'üìä ◊©◊ô◊¢◊ï◊® ◊ê◊ô◊†◊§◊ú◊¶◊ô◊î',
    'core inflation rate': 'üìä ◊ê◊ô◊†◊§◊ú◊¶◊ô◊î ◊ú◊ô◊ë◊î',
    'ppi': 'üè≠ PPI - ◊û◊ì◊ì ◊û◊ó◊ô◊®◊ô ◊ô◊¶◊®◊ü',
    'pce price index': 'üí≥ ◊û◊ì◊ì ◊û◊ó◊ô◊®◊ô PCE',
    'core pce price index': 'üí≥ PCE ◊ú◊ô◊ë◊î',
    
    // ◊™◊¢◊°◊ï◊ß◊î
    'non farm payrolls': 'üëî NFP - ◊û◊©◊®◊ï◊™ ◊ó◊ì◊©◊ï◊™',
    'nonfarm payrolls private': 'üëî NFP - ◊û◊©◊®◊ï◊™ ◊§◊®◊ò◊ô◊ï◊™',
    'unemployment rate': 'üìâ ◊©◊ô◊¢◊ï◊® ◊ê◊ë◊ò◊ú◊î',
    'initial jobless claims': 'üìã ◊™◊ë◊ô◊¢◊ï◊™ ◊ê◊ë◊ò◊ú◊î ◊®◊ê◊©◊ï◊†◊ô◊ï◊™',
    'jobless claims': 'üìã ◊™◊ë◊ô◊¢◊ï◊™ ◊ê◊ë◊ò◊ú◊î',
    'average hourly earnings': 'üí∞ ◊©◊õ◊® ◊û◊û◊ï◊¶◊¢ ◊ú◊©◊¢◊î',
    'employment cost index': 'üí∞ ◊û◊ì◊ì ◊¢◊ú◊ï◊™ ◊™◊¢◊°◊ï◊ß◊î',
    'employment wages': 'üí∞ ◊©◊õ◊® ◊™◊¢◊°◊ï◊ß◊î',
    'nfib business optimism': 'üòä ◊ê◊ï◊§◊ò◊ô◊û◊ô◊ï◊™ ◊¢◊°◊ß◊ô◊™ NFIB',
    
    // ◊¶◊û◊ô◊ó◊î
    'gdp': 'üåç GDP - ◊™◊ï◊¶◊®',
    'retail sales': 'üõçÔ∏è ◊û◊õ◊ô◊®◊ï◊™ ◊ß◊û◊¢◊ï◊†◊ê◊ô◊ï◊™',
    'wholesale sales': 'üè≠ ◊û◊õ◊ô◊®◊ï◊™ ◊°◊ô◊ò◊ï◊†◊ê◊ô◊ï◊™',
    'industrial production': 'üè≠ ◊ô◊ô◊¶◊ï◊® ◊™◊¢◊©◊ô◊ô◊™◊ô',
    'personal income': 'üíµ ◊î◊õ◊†◊°◊î ◊ê◊ô◊©◊ô◊™',
    'personal spending': 'üí≥ ◊î◊ï◊¶◊ê◊ï◊™ ◊ê◊ô◊©◊ô◊ï◊™',
    
    // ◊°◊ß◊®◊ô◊ù
    'michigan consumer sentiment': 'üòä ◊°◊†◊ò◊ô◊û◊†◊ò ◊¶◊®◊õ◊ü ◊û◊ô◊©◊ô◊í◊ü',
    'michigan inflation expectations': 'üìä ◊¶◊ô◊§◊ô◊ï◊™ ◊ê◊ô◊†◊§◊ú◊¶◊ô◊î',
    'michigan consumer expectations': 'üòä ◊¶◊ô◊§◊ô◊ï◊™ ◊¶◊®◊õ◊ü',
    'michigan current conditions': 'üìä ◊™◊†◊ê◊ô◊ù ◊†◊ï◊õ◊ó◊ô◊ô◊ù',
    'consumer confidence': 'üòä ◊ê◊û◊ï◊ü ◊¶◊®◊õ◊ü',
    'chicago pmi': 'üè≠ PMI ◊©◊ô◊ß◊í◊ï',
    
    // ◊†◊ì◊ú"◊ü
    'housing starts': 'üèóÔ∏è ◊î◊™◊ó◊ú◊ï◊™ ◊ë◊†◊ô◊ô◊î',
    'building permits': 'üìã ◊î◊ô◊™◊®◊ô ◊ë◊†◊ô◊ô◊î',
    'construction spending': 'üèóÔ∏è ◊î◊ï◊¶◊ê◊ï◊™ ◊ë◊†◊ô◊ô◊î',
    '30-year mortgage rate': 'üè† ◊®◊ô◊ë◊ô◊™ ◊û◊©◊õ◊†◊™◊ê 30 ◊©◊†◊î',
    '15-year mortgage rate': 'üè† ◊®◊ô◊ë◊ô◊™ ◊û◊©◊õ◊†◊™◊ê 15 ◊©◊†◊î',
    
    // ◊°◊ó◊® ◊ï◊™◊ß◊¶◊ô◊ë
    'trade balance': 'üåê ◊û◊ê◊ñ◊ü ◊°◊ó◊®',
    'budget balance': 'üí∞ ◊û◊ê◊ñ◊ü ◊™◊ß◊¶◊ô◊ë◊ô',
    'federal budget': 'üí∞ ◊™◊ß◊¶◊ô◊ë ◊§◊ì◊®◊ú◊ô',
    
    // ◊ê◊†◊®◊í◊ô◊î
    'baker hughes oil rig count': 'üõ¢Ô∏è ◊û◊°◊§◊® ◊ê◊°◊ì◊ï◊™ ◊†◊§◊ò',
    'api crude oil stock change': 'üõ¢Ô∏è ◊©◊ô◊†◊ï◊ô ◊û◊ú◊ê◊ô ◊†◊§◊ò API',
    'eia crude oil stocks': 'üõ¢Ô∏è ◊û◊ú◊ê◊ô ◊†◊§◊ò EIA',
    'eia natural gas stocks': '‚ö° ◊û◊ú◊ê◊ô ◊í◊ñ ◊ò◊ë◊¢◊ô',
    
    // ◊ê◊ó◊®
    'opec monthly report': 'üõ¢Ô∏è ◊ì◊ï"◊ó ◊ó◊ï◊ì◊©◊ô OPEC',
    'imf meeting': 'üåê ◊§◊í◊ô◊©◊™ IMF',
    'wasde report': 'üåæ ◊ì◊ï"◊ó WASDE',
    'redbook': 'üìä ◊®◊ì◊ë◊ï◊ß',
  };
  
  for (const [key, value] of Object.entries(translations)) {
    if (type.includes(key)) return value;
  }
  
  // ◊™◊®◊í◊ï◊û◊ô◊ù ◊õ◊ú◊ú◊ô◊ô◊ù
  if (type.includes('speech')) return `üé§ ◊†◊ê◊ï◊ù - ${eventType}`;
  if (type.includes('auction')) return `üíµ ◊û◊õ◊ô◊®◊î ◊§◊ï◊û◊ë◊ô◊™ - ${eventType}`;
  
  return eventType;
}

serve(async (req) => {
  try {
    console.log('üöÄ Economic Calendar Sync Started')
    
    // ◊ó◊ô◊ë◊ï◊® ◊ú-Supabase
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseKey)
    
    // ◊ó◊ô◊©◊ï◊ë ◊™◊ê◊®◊ô◊õ◊ô◊ù: 3 ◊ó◊ï◊ì◊©◊ô◊ù ◊ê◊ó◊ï◊®◊î + 3 ◊ß◊ì◊ô◊û◊î ◊û◊î◊ô◊ï◊ù
    const today = new Date()
    const todayStr = today.toISOString().split('T')[0]
    
    const startDate = new Date(today)
    startDate.setMonth(startDate.getMonth() - 3)
    const endDate = new Date(today)
    endDate.setMonth(endDate.getMonth() + 3)
    
    const from = startDate.toISOString().split('T')[0]
    const to = endDate.toISOString().split('T')[0]
    
    console.log(`üìÖ Today: ${todayStr}`)
    console.log(`üìÖ Range: ${from} to ${to}`)
    
    // ◊©◊ú◊ô◊§◊î ◊û-EODHD
    const url = `https://eodhd.com/api/economic-events?api_token=${EODHD_API_KEY}&from=${from}&to=${to}&country=US&limit=1000&fmt=json`
    console.log(`üîÑ Calling EODHD...`)
    
    const res = await fetch(url)
    if (!res.ok) throw new Error(`API error: ${res.status}`)
    
    const apiData = await res.json()
    if (!Array.isArray(apiData)) throw new Error('Invalid API response')
    
    console.log(`üìä EODHD returned: ${apiData.length} events`)
    
    // ◊î◊û◊®◊î ◊ú◊§◊ï◊®◊û◊ò ◊©◊ú◊†◊ï
    const events = apiData.map((e: any) => {
      const [date, time] = e.date.split(' ')
      const shortTime = time ? time.substring(0, 5) : '00:00'
      
      const originalType = e.type || 'Economic Event'
      const translatedTitle = translateTitle(originalType)
      
      console.log(`üîÑ "${originalType}" ‚Üí "${translatedTitle}"`)
      
      // ◊ß◊ë◊ô◊¢◊™ ◊ó◊©◊ô◊ë◊ï◊™
      const type = originalType.toLowerCase()
      let importance = 'medium'
      if (type.includes('cpi') || type.includes('nfp') || type.includes('employment') || 
          type.includes('gdp') || type.includes('fomc') || type.includes('pce') || 
          type.includes('ppi') || type.includes('retail sales') || type.includes('unemployment')) {
        importance = 'high'
      }
      
      // ◊ß◊ò◊í◊ï◊®◊ô◊î
      let category = '◊õ◊ú◊õ◊ú◊î'
      if (type.includes('cpi') || type.includes('ppi') || type.includes('inflation') || type.includes('pce')) category = '◊ê◊ô◊†◊§◊ú◊¶◊ô◊î'
      else if (type.includes('employ') || type.includes('nfp') || type.includes('jobless')) category = '◊™◊¢◊°◊ï◊ß◊î'
      else if (type.includes('gdp')) category = '◊¶◊û◊ô◊ó◊î'
      else if (type.includes('fed') || type.includes('fomc') || type.includes('rate')) category = '◊û◊ì◊ô◊†◊ô◊ï◊™ ◊û◊ï◊†◊ô◊ò◊®◊ô◊™'
      
      return {
        id: `econ_${e.type}_${e.date}`.replace(/[^a-zA-Z0-9_]/g, '_'),
        title: translatedTitle,
        country: '◊ê◊®◊¶◊ï◊™ ◊î◊ë◊®◊ô◊™',
        currency: 'USD',
        importance,
        date,
        time: shortTime,
        actual: e.actual?.toString() || '',
        forecast: e.estimate?.toString() || '',
        previous: e.previous?.toString() || '',
        description: `${e.type}${e.period ? ` (${e.period})` : ''}`,
        category,
        impact: importance,
        source: 'EODHD'
      }
    })
    
    console.log(`üìä Processed: ${events.length} events`)
    
    // ◊î◊°◊®◊™ ◊õ◊§◊ô◊ú◊ï◊ô◊ï◊™
    const unique = events.filter((e, i, arr) => 
      arr.findIndex(x => x.id === e.id) === i
    )
    
    console.log(`üìä Unique: ${unique.length} events`)
    
    // ◊©◊û◊ô◊®◊î ◊ë◊û◊°◊ì ◊†◊™◊ï◊†◊ô◊ù
    if (unique.length > 0) {
      const { error } = await supabase
        .from('economic_events')
        .upsert(unique, { onConflict: 'id' })
      
      if (error) {
        console.error('‚ùå DB Error:', error)
        throw error
      }
      
      console.log(`‚úÖ Saved to DB`)
    }
    
    // ◊°◊ò◊ò◊ô◊°◊ò◊ô◊ß◊ï◊™
    const todayCount = unique.filter(e => e.date === todayStr).length
    const highCount = unique.filter(e => e.importance === 'high').length
    
    return new Response(JSON.stringify({
      success: true,
      total: unique.length,
      range: `${from} to ${to}`,
      today: todayCount,
      highImportance: highCount
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200
    })
    
  } catch (error: any) {
    console.error('‚ùå Error:', error)
    return new Response(JSON.stringify({
      success: false,
      error: error.message || 'Unknown error'
    }), {
      headers: { 'Content-Type': 'application/json' },
      status: 500
    })
  }
})

